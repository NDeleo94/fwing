# Generated by Django 4.1 on 2023-04-16 18:14

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="FwUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "dni",
                    models.BigIntegerField(
                        unique=True,
                        validators=[django.core.validators.MinValueValidator(1000000)],
                        verbose_name="Numero de documento",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=255,
                        verbose_name="Correo Electronico",
                        blank=True,
                        null=True,
                    ),
                ),
                ("nombres", models.CharField(max_length=200, verbose_name="Nombres")),
                (
                    "apellidos",
                    models.CharField(max_length=200, verbose_name="Apellidos"),
                ),
                (
                    "fecha_nac",
                    models.DateField(
                        blank=True, null=True, verbose_name="Fecha de Nacimiento"
                    ),
                ),
                (
                    "nacionalidad",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Nacionalidad",
                    ),
                ),
                (
                    "ciudad_natal",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Ciudad natal",
                    ),
                ),
                (
                    "ciudad_actual",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Ciudad actual",
                    ),
                ),
                (
                    "sexo",
                    models.CharField(
                        choices=[("F", "Femenino"), ("M", "Masculino")],
                        max_length=1,
                        verbose_name="Sexo",
                        blank=True,
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
            },
        ),
    ]
